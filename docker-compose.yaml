services:
  # IoT Ingress Service
  iot-ingress-service:
    build:
      context: ./messaging-service/iot-ingress-service
      dockerfile: Dockerfile
    container_name: iot-ingress-service
    ports:
      - "1883:1883"
    depends_on:
      - kafka
    networks:
      - my-network
    environment:
      - NODE_ENV=production
    volumes:
      - ./scripts/wait-for-it.sh:/usr/bin/wait-for-it.sh
    entrypoint: ["/usr/bin/wait-for-it.sh", "kafka:9092", "-t", "60", "--", "node", "mqtt-broker.js"]

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    networks:
      - my-network

  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - my-network

  # Analytics Engine
  analytics-engine:
    build:
      context: ./analytics-engine
      dockerfile: Dockerfile
    container_name: analytics-engine
    ports:
      - "7001:8000"
    environment:
      - PYTHONUNBUFFERED=1
    volumes:
      - ./scripts/wait-for-it.sh:/usr/bin/wait-for-it.sh
      - ./analytics-engine:/app
    networks:
      - my-network
    depends_on:
      - kafka
      - postgres-db
    entrypoint: ["/usr/bin/wait-for-it.sh", "postgres-db:5432", "-t", "60", "--", "/usr/bin/wait-for-it.sh", "kafka:9092", "-t", "60", "--", "poetry", "run", "uvicorn", "analytics_engine.main:app", "--host", "0.0.0.0", "--port", "8000"]

  # PostgreSQL Database
  postgres-db:
    image: postgres:16
    container_name: postgres_db
    environment:
      POSTGRES_USER: exampleuser
      POSTGRES_PASSWORD: examplepass
      POSTGRES_DB: exampledb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data-store/init_postgres.sh:/docker-entrypoint-initdb.d/init_postgres.sh
    networks:
      - my-network

  # MongoDB Database
  mongodb:
    image: mongo:latest
    container_name: mongo_db
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongouser
      MONGO_INITDB_ROOT_PASSWORD: mongopass
      MONGO_INITDB_DATABASE: exampledb
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - ./data-store/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    networks:
      - my-network

  bytebase:
    image: bytebase/bytebase:latest
    container_name: bytebase
    restart: always
    ports:
      - "8080:8080"  # Access Bytebase at http://localhost:8080
    volumes:
      - bytebase_data:/var/opt/bytebase # Mount volume for Bytebase data
    environment:
      - BB_DATA=/var/opt/bytebase  # Data storage path
    networks:
      - my-network

  # IoT Cloud Controller
  iot-cloud-controller:
    build:
      context: ./iot-cloud-controller/App
      dockerfile: Dockerfile
    container_name: iot-cloud-controller
    ports:
      - "4001:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    volumes:
      - ./iot-cloud-controller/App:/app
      - ./scripts/wait-for-it.sh:/usr/bin/wait-for-it.sh
    networks:
      - my-network
    depends_on:
      - mongodb
      - kafka
    entrypoint: ["/usr/bin/wait-for-it.sh", "mongodb:27017", "-t", "60", "--", "/usr/bin/wait-for-it.sh", "kafka:9092", "-t", "60", "--", "dotnet", "DotNet.Docker.dll"]

  # IoT Device and Agent Simulator
  iot-agent-simulator:
    build:
      context: ./iot-device/iot-agent-simulator/App
    container_name: iot-agent-simulator
    ports:
      - "5001:80"  # Maps the container's port 80 to port 5001 on the host
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    volumes:
      - ./iot-device/iot-agent-simulator/App:/app # Mounts the app directory for live changes if needed
      - ./scripts/wait-for-it.sh:/usr/bin/wait-for-it.sh  # Mount wait-for-it.sh to /usr/bin/
    networks:
      - my-network
    depends_on:
      - iot-device-1  # Ensure the server starts before the client
      - iot-device-2
      - iot-device-3
      - iot-ingress-service  # Wait for iot-ingress-service
    entrypoint: ["/usr/bin/wait-for-it.sh", "iot-device-1:8080", "-t", "60",  "--", "/usr/bin/wait-for-it.sh", "iot-device-2:8080", "-t", "60",  "--", "/usr/bin/wait-for-it.sh", "-t", "60",  "iot-device-3:8080", "--", "dotnet", "DotNet.Docker.dll"]

  iot-device-1:
    build:
      context: ./iot-device/iot-device/App
    container_name: iot-device-1
    ports:
      - "5002:8080"  # Maps the container's port 80 to port 5002 on the host
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    volumes:
      - ./iot-device/iot-device/App:/app # Mounts the app directory for live changes if needed
      - ./scripts/wait-for-it.sh:/usr/bin/wait-for-it.sh  # Mount wait-for-it.sh to /usr/bin/
    networks:
      - my-network
    depends_on:
      - iot-ingress-service  # Wait for IoT ingress
    entrypoint: ["/usr/bin/wait-for-it.sh", "iot-ingress-service:1883", "-t", "60",  "--", "dotnet", "App.dll"]  # Use wait-for-it.sh for MQTT

  iot-device-2:
    build:
      context: ./iot-device/iot-device/App
    container_name: iot-device-2
    ports:
      - "5003:8080"  # Maps the container's port 80 to port 5003 on the host
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    volumes:
      - ./iot-device/iot-device/App:/app # Mounts the app directory for live changes if needed
      - ./scripts/wait-for-it.sh:/usr/bin/wait-for-it.sh  # Mount wait-for-it.sh to /usr/bin/
    networks:
      - my-network
    depends_on:
      - iot-ingress-service
    entrypoint: ["/usr/bin/wait-for-it.sh", "iot-ingress-service:1883", "-t", "60",  "--", "dotnet", "App.dll"]  # Use wait-for-it.sh for MQTT

  iot-device-3:
    build:
      context: ./iot-device/iot-device/App
    container_name: iot-device-3
    ports:
      - "5004:8080"  # Maps the container's port 80 to port 5004 on the host
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    volumes:
      - ./iot-device/iot-device/App:/app # Mounts the app directory for live changes if needed
      - ./scripts/wait-for-it.sh:/usr/bin/wait-for-it.sh  # Mount wait-for-it.sh to /usr/bin/
    networks:
      - my-network
    depends_on:
      - iot-ingress-service
    entrypoint: ["/usr/bin/wait-for-it.sh", "iot-ingress-service:1883", "-t", "60",  "--", "dotnet", "App.dll"]  # Use wait-for-it.sh for MQTT

  # Monitoring Dashboard
  monitoring-dashboard:
    build:
      context: ./monitoring-dashboard
    container_name: monitoring-dashboard
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
    volumes:
      - ./monitoring-dashboard:/app
    networks:
      - my-network
    command: npm run dev

  # Operator Dashboard
  operator-dashboard:
    build:
      context: ./operator-dashboard
    container_name: operator-dashboard
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_ANALYTICS_API_BASE_URL=https://analytics-engine:8000
    volumes:
      - ./operator-dashboard:/app
    networks:
      - my-network
    command: npm run dev

networks:
  my-network:
    driver: bridge

volumes:
  postgres_data:
  mongo_data:
  bytebase_data:
